import { db } from "../javascript/firebase.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.11.0/firebase-auth.js";
import { doc, getDoc, collection, getDocs } from "https://www.gstatic.com/firebasejs/10.11.0/firebase-firestore.js";

const auth = getAuth();

document.addEventListener("DOMContentLoaded", () => {
  onAuthStateChanged(auth, async (user) => {
    if (user) {
      loadTransactionData(user.uid);
    } else {
      console.error("User not authenticated.");
    }
  });

  updateSubtitleDate();
});

function updateSubtitleDate() {
  const subtitleElement = document.querySelector(".subtitle");
  if (!subtitleElement) return;

  const monthsThai = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
  ];

  const now = new Date();
  const month = monthsThai[now.getMonth()];
  const year = now.getFullYear() + 543;
  subtitleElement.innerHTML = `${month} <strong>${year}</strong>`;
}

function convertThaiDateToDateObject(thaiDateStr) {
  const [date, time] = thaiDateStr.split(" ");
  const [day, month, year] = date.split("/").map(Number);
  const [hours, minutes, seconds] = time.split(":").map(Number);
  return new Date(year - 543, month - 1, day, hours, minutes, seconds);
}

async function getMonthlyTotal(userId, subcollectionName, amountField, dateField) {
  const ref = collection(db, "goal", userId, subcollectionName);
  const snapshot = await getDocs(ref);
  const now = new Date();
  const currentMonth = now.getMonth();
  const currentYear = now.getFullYear();

  let total = 0;
  snapshot.forEach(doc => {
    const data = doc.data();
    if (data[dateField]) {
      const d = convertThaiDateToDateObject(data[dateField]);
      if (d.getMonth() === currentMonth && d.getFullYear() === currentYear) {
        total += parseFloat(data[amountField]) || 0;
      }
    }
  });
  return total;
}

async function loadTransactionData(userId) {
  const userDoc = doc(db, "goal", userId);
  try {
    const snap = await getDoc(userDoc);
    if (!snap.exists()) {
      throw new Error('No data');
    }
    const data = snap.data();

    // Show goal
    const formatted = formatGoalLabel(data.goal, data);
    document.getElementById("user-goal").innerHTML = formatted
      ? `üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: <strong>${formatted}</strong>`
      : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô";

    // Hide DCA button if irrelevant
    const rawGoal = (data.goal || "").toLowerCase();
    const btn = document.querySelector(".button-dca");
    if (btn && rawGoal !== "dca" && rawGoal !== "dca & installment trial") {
      btn.style.display = "none";
    }

    // Totals
    const income = parseFloat(data.income) || 0;
    const expense = parseFloat(data.expense) || 0;
    const debt = parseFloat(data.debt) || 0;
    const dca = await getMonthlyTotal(userId, "dca_history", "amount", "date");
    const savings = await getMonthlyTotal(userId, "saving_history", "amount", "date");
    const installment = await getMonthlyTotal(userId, "installment_history", "amount", "date");
    const emergency = await getMonthlyTotal(userId, "emergencyfund_history", "amount", "date");

    const totalSavings = dca + savings + emergency; // exclude installment
    const remaining = income - (expense + totalSavings + debt + installment);

    updateChart(
      [income, expense, totalSavings, installment, debt, remaining],
      { dca, savings, installment, emergency }
    );
  } catch (err) {
    console.error(err);
    document.getElementById("user-goal").textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î";
    updateChart([0, 0, 0, 0, 0, 0], { dca:0, savings:0, installment:0, emergency:0 });
  }
}

let transactionChart = null;
function updateChart(dataArr, details) {
  const ctx = document.getElementById("transactionChart").getContext("2d");
  if (transactionChart) transactionChart.destroy();

  transactionChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö", "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", "‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°", "‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≠‡∏ô", "‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô", "‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"],
      datasets: [{
        data: dataArr,
        backgroundColor: [
          "#2ecc71", // income
          "#e74c3c", // expense
          "#2980b9", // savings
          "#ffd1e3", // installment
          "#d35400", // debt
          "#1abc9c"  // remaining
        ]
      }]
    },
    options: {
      plugins: {
        legend: { display: false },
        tooltip: {
          titleFont: { family: 'Prompt', size: 14 },
          bodyFont: { family: 'Prompt', size: 14 },
          callbacks: {
            label: ctx => {
              const idx = ctx.dataIndex;
              const val = ctx.raw.toLocaleString() + " ‡∏ö‡∏≤‡∏ó";
              if (idx === 2) {
                return [
                  `‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°‡∏£‡∏ß‡∏°: ${val}`,
                  ` ‚Ä¢ DCA: ${details.dca.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
                  ` ‚Ä¢ ‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°: ${details.savings.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
                  ` ‚Ä¢ ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: ${details.emergency.toLocaleString()} ‡∏ö‡∏≤‡∏ó`
                ];
              }
              if (idx === 3) {
                return `‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≠‡∏ô: ${details.installment.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
              }
              const lbl = ["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö","‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢","‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°","‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≠‡∏ô","‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô","‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"][idx];
              return `${lbl}: ${val}`;
            }
          }
        }
      },
      scales: {
        x: { ticks: { font: { family: 'Prompt', size: 14 } } },
        y: {
          beginAtZero: true,
          ticks: {
            callback: v => v.toLocaleString() + " ‡∏ö‡∏≤‡∏ó",
            font: { family: 'Prompt', size: 14 }
          }
        }
      }
    }
  });
}

function formatGoalLabel(goal, gdata) {
  if (!goal) return "";
  const lg = goal.toLowerCase();
  switch (lg) {
    case 'saving': return '‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô';
    case 'dca': return 'DCA';
    case 'no goal': return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô';
  }
  const type = gdata?.installment?.assetType;
  const label = type === 'house'
    ? '‡∏ã‡πâ‡∏≠‡∏°‡∏ú‡πà‡∏≠‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô'
    : type === 'car'
      ? '‡∏ã‡πâ‡∏≠‡∏°‡∏ú‡πà‡∏≠‡∏ô ‡∏£‡∏ñ'
      : '‡∏ã‡πâ‡∏≠‡∏°‡∏ú‡πà‡∏≠‡∏ô';
  if (lg === 'installment trial') return label;
  if (lg === 'dca & installment trial') return `DCA & ${label}`;
  return goal;
}